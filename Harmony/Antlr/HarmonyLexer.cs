//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Skinz\Desktop\Harmony\Harmony.Antlr\HarmonyLexer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class HarmonyLexer : Lexer {
	public const int
		UNIT=1, NOTE=2, CHORD=3, MAIN=4, ATR_NAME=5, ATR_TEMPO=6, ATR_DURATION=7, 
		ATR_AUTHOR=8, TRANSPOSE=9, PROPAGATE=10, ARPEGGIATE=11, LPAREN=12, RPAREN=13, 
		LBRACE=14, RBRACE=15, COMMA=16, DOT=17, SEMI=18, COLON=19, SHARP=20, FUNC=21, 
		WS=22, IDENTIFIER=23, DECIMAL_LITERAL=24, FLOAT_LITERAL=25;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"UNIT", "NOTE", "CHORD", "MAIN", "ATR_NAME", "ATR_TEMPO", "ATR_DURATION", 
		"ATR_AUTHOR", "TRANSPOSE", "PROPAGATE", "ARPEGGIATE", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "COMMA", "DOT", "SEMI", "COLON", "SHARP", "FUNC", 
		"WS", "IDENTIFIER", "DECIMAL_LITERAL", "FLOAT_LITERAL", "Digits", "LetterOrDigit", 
		"Letter"
	};


	public HarmonyLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'unit'", "'note'", "'chord'", "'main'", "'name'", "'tempo'", "'duration'", 
		"'author'", "'transpose'", "'propagate'", "'arpeggiate'", "'('", "')'", 
		"'{'", "'}'", "','", "'.'", "';'", "':'", "'#'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "UNIT", "NOTE", "CHORD", "MAIN", "ATR_NAME", "ATR_TEMPO", "ATR_DURATION", 
		"ATR_AUTHOR", "TRANSPOSE", "PROPAGATE", "ARPEGGIATE", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "COMMA", "DOT", "SEMI", "COLON", "SHARP", "FUNC", 
		"WS", "IDENTIFIER", "DECIMAL_LITERAL", "FLOAT_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HarmonyLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1B\xE2\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x6\x17\xA1\n\x17\r\x17"+
		"\xE\x17\xA2\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\xA9\n\x18\x3\x18\a\x18"+
		"\xAC\n\x18\f\x18\xE\x18\xAF\v\x18\x3\x19\x5\x19\xB2\n\x19\x3\x19\x3\x19"+
		"\x3\x19\x5\x19\xB7\n\x19\x3\x19\x6\x19\xBA\n\x19\r\x19\xE\x19\xBB\x3\x19"+
		"\x5\x19\xBF\n\x19\x5\x19\xC1\n\x19\x3\x19\x5\x19\xC4\n\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\xC9\n\x1A\x3\x1A\x3\x1A\x5\x1A\xCD\n\x1A\x3\x1B\x3\x1B"+
		"\a\x1B\xD1\n\x1B\f\x1B\xE\x1B\xD4\v\x1B\x3\x1B\x5\x1B\xD7\n\x1B\x3\x1C"+
		"\x3\x1C\x5\x1C\xDB\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\xE1\n\x1D"+
		"\x2\x2\x2\x1E\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t"+
		"\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F"+
		"\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19"+
		"\x31\x2\x1A\x33\x2\x1B\x35\x2\x2\x37\x2\x2\x39\x2\x2\x3\x2\v\x5\x2\v\f"+
		"\xE\xF\"\"\x3\x2\x33;\x4\x2NNnn\x3\x2\x32;\x4\x2\x32;\x61\x61\x6\x2&&"+
		"\x43\\\x61\x61\x63|\x4\x2\x2\x81\xD802\xDC01\x3\x2\xD802\xDC01\x3\x2\xDC02"+
		"\xE001\xEE\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3"+
		"\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3"+
		"\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2"+
		"\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2"+
		"\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2"+
		")\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3"+
		"\x2\x2\x2\x2\x33\x3\x2\x2\x2\x3;\x3\x2\x2\x2\x5@\x3\x2\x2\x2\a\x45\x3"+
		"\x2\x2\x2\tK\x3\x2\x2\x2\vP\x3\x2\x2\x2\rU\x3\x2\x2\x2\xF[\x3\x2\x2\x2"+
		"\x11\x64\x3\x2\x2\x2\x13k\x3\x2\x2\x2\x15u\x3\x2\x2\x2\x17\x7F\x3\x2\x2"+
		"\x2\x19\x8A\x3\x2\x2\x2\x1B\x8C\x3\x2\x2\x2\x1D\x8E\x3\x2\x2\x2\x1F\x90"+
		"\x3\x2\x2\x2!\x92\x3\x2\x2\x2#\x94\x3\x2\x2\x2%\x96\x3\x2\x2\x2\'\x98"+
		"\x3\x2\x2\x2)\x9A\x3\x2\x2\x2+\x9C\x3\x2\x2\x2-\xA0\x3\x2\x2\x2/\xA6\x3"+
		"\x2\x2\x2\x31\xB1\x3\x2\x2\x2\x33\xCC\x3\x2\x2\x2\x35\xCE\x3\x2\x2\x2"+
		"\x37\xDA\x3\x2\x2\x2\x39\xE0\x3\x2\x2\x2;<\aw\x2\x2<=\ap\x2\x2=>\ak\x2"+
		"\x2>?\av\x2\x2?\x4\x3\x2\x2\x2@\x41\ap\x2\x2\x41\x42\aq\x2\x2\x42\x43"+
		"\av\x2\x2\x43\x44\ag\x2\x2\x44\x6\x3\x2\x2\x2\x45\x46\a\x65\x2\x2\x46"+
		"G\aj\x2\x2GH\aq\x2\x2HI\at\x2\x2IJ\a\x66\x2\x2J\b\x3\x2\x2\x2KL\ao\x2"+
		"\x2LM\a\x63\x2\x2MN\ak\x2\x2NO\ap\x2\x2O\n\x3\x2\x2\x2PQ\ap\x2\x2QR\a"+
		"\x63\x2\x2RS\ao\x2\x2ST\ag\x2\x2T\f\x3\x2\x2\x2UV\av\x2\x2VW\ag\x2\x2"+
		"WX\ao\x2\x2XY\ar\x2\x2YZ\aq\x2\x2Z\xE\x3\x2\x2\x2[\\\a\x66\x2\x2\\]\a"+
		"w\x2\x2]^\at\x2\x2^_\a\x63\x2\x2_`\av\x2\x2`\x61\ak\x2\x2\x61\x62\aq\x2"+
		"\x2\x62\x63\ap\x2\x2\x63\x10\x3\x2\x2\x2\x64\x65\a\x63\x2\x2\x65\x66\a"+
		"w\x2\x2\x66g\av\x2\x2gh\aj\x2\x2hi\aq\x2\x2ij\at\x2\x2j\x12\x3\x2\x2\x2"+
		"kl\av\x2\x2lm\at\x2\x2mn\a\x63\x2\x2no\ap\x2\x2op\au\x2\x2pq\ar\x2\x2"+
		"qr\aq\x2\x2rs\au\x2\x2st\ag\x2\x2t\x14\x3\x2\x2\x2uv\ar\x2\x2vw\at\x2"+
		"\x2wx\aq\x2\x2xy\ar\x2\x2yz\a\x63\x2\x2z{\ai\x2\x2{|\a\x63\x2\x2|}\av"+
		"\x2\x2}~\ag\x2\x2~\x16\x3\x2\x2\x2\x7F\x80\a\x63\x2\x2\x80\x81\at\x2\x2"+
		"\x81\x82\ar\x2\x2\x82\x83\ag\x2\x2\x83\x84\ai\x2\x2\x84\x85\ai\x2\x2\x85"+
		"\x86\ak\x2\x2\x86\x87\a\x63\x2\x2\x87\x88\av\x2\x2\x88\x89\ag\x2\x2\x89"+
		"\x18\x3\x2\x2\x2\x8A\x8B\a*\x2\x2\x8B\x1A\x3\x2\x2\x2\x8C\x8D\a+\x2\x2"+
		"\x8D\x1C\x3\x2\x2\x2\x8E\x8F\a}\x2\x2\x8F\x1E\x3\x2\x2\x2\x90\x91\a\x7F"+
		"\x2\x2\x91 \x3\x2\x2\x2\x92\x93\a.\x2\x2\x93\"\x3\x2\x2\x2\x94\x95\a\x30"+
		"\x2\x2\x95$\x3\x2\x2\x2\x96\x97\a=\x2\x2\x97&\x3\x2\x2\x2\x98\x99\a<\x2"+
		"\x2\x99(\x3\x2\x2\x2\x9A\x9B\a%\x2\x2\x9B*\x3\x2\x2\x2\x9C\x9D\a/\x2\x2"+
		"\x9D\x9E\a@\x2\x2\x9E,\x3\x2\x2\x2\x9F\xA1\t\x2\x2\x2\xA0\x9F\x3\x2\x2"+
		"\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4"+
		"\x3\x2\x2\x2\xA4\xA5\b\x17\x2\x2\xA5.\x3\x2\x2\x2\xA6\xA8\x5\x39\x1D\x2"+
		"\xA7\xA9\x5)\x15\x2\xA8\xA7\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAD\x3"+
		"\x2\x2\x2\xAA\xAC\x5\x37\x1C\x2\xAB\xAA\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2"+
		"\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\x30\x3\x2\x2\x2\xAF\xAD\x3"+
		"\x2\x2\x2\xB0\xB2\a/\x2\x2\xB1\xB0\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2"+
		"\xC0\x3\x2\x2\x2\xB3\xC1\a\x32\x2\x2\xB4\xBE\t\x3\x2\x2\xB5\xB7\x5\x35"+
		"\x1B\x2\xB6\xB5\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xBF\x3\x2\x2\x2\xB8"+
		"\xBA\a\x61\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xB9\x3\x2"+
		"\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBF\x5\x35\x1B\x2\xBE"+
		"\xB6\x3\x2\x2\x2\xBE\xB9\x3\x2\x2\x2\xBF\xC1\x3\x2\x2\x2\xC0\xB3\x3\x2"+
		"\x2\x2\xC0\xB4\x3\x2\x2\x2\xC1\xC3\x3\x2\x2\x2\xC2\xC4\t\x4\x2\x2\xC3"+
		"\xC2\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\x32\x3\x2\x2\x2\xC5\xC6\x5\x35"+
		"\x1B\x2\xC6\xC8\a\x30\x2\x2\xC7\xC9\x5\x35\x1B\x2\xC8\xC7\x3\x2\x2\x2"+
		"\xC8\xC9\x3\x2\x2\x2\xC9\xCD\x3\x2\x2\x2\xCA\xCB\a\x30\x2\x2\xCB\xCD\x5"+
		"\x35\x1B\x2\xCC\xC5\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\x34\x3\x2\x2\x2"+
		"\xCE\xD6\t\x5\x2\x2\xCF\xD1\t\x6\x2\x2\xD0\xCF\x3\x2\x2\x2\xD1\xD4\x3"+
		"\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD5\x3\x2\x2\x2"+
		"\xD4\xD2\x3\x2\x2\x2\xD5\xD7\t\x5\x2\x2\xD6\xD2\x3\x2\x2\x2\xD6\xD7\x3"+
		"\x2\x2\x2\xD7\x36\x3\x2\x2\x2\xD8\xDB\x5\x39\x1D\x2\xD9\xDB\t\x5\x2\x2"+
		"\xDA\xD8\x3\x2\x2\x2\xDA\xD9\x3\x2\x2\x2\xDB\x38\x3\x2\x2\x2\xDC\xE1\t"+
		"\a\x2\x2\xDD\xE1\n\b\x2\x2\xDE\xDF\t\t\x2\x2\xDF\xE1\t\n\x2\x2\xE0\xDC"+
		"\x3\x2\x2\x2\xE0\xDD\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE1:\x3\x2\x2\x2"+
		"\x12\x2\xA2\xA8\xAD\xB1\xB6\xBB\xBE\xC0\xC3\xC8\xCC\xD2\xD6\xDA\xE0\x3"+
		"\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
