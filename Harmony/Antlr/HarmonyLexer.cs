//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Skinz\Desktop\Harmony\Harmony.Antlr\HarmonyLexer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class HarmonyLexer : Lexer {
	public const int
		UNIT=1, NOTE=2, LPAREN=3, RPAREN=4, LBRACE=5, RBRACE=6, COMMA=7, DOT=8, 
		SEMI=9, COLON=10, IDENTIFIER=11, FLOAT_LITERAL=12, WS=13;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"UNIT", "NOTE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", "DOT", 
		"SEMI", "COLON", "IDENTIFIER", "FLOAT_LITERAL", "Digits", "LetterOrDigit", 
		"Letter", "WS"
	};


	public HarmonyLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'unit'", "'note'", "'('", "')'", "'{'", "'}'", "','", "'.'", "';'", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "UNIT", "NOTE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", 
		"DOT", "SEMI", "COLON", "IDENTIFIER", "FLOAT_LITERAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HarmonyLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\xFh\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t"+
		"\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\a\f@\n\f\f\f\xE\f\x43\v\f\x3\r\x3"+
		"\r\x3\r\x5\rH\n\r\x3\r\x3\r\x5\rL\n\r\x3\xE\x3\xE\a\xEP\n\xE\f\xE\xE\xE"+
		"S\v\xE\x3\xE\x5\xEV\n\xE\x3\xF\x3\xF\x5\xFZ\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x5\x10`\n\x10\x3\x11\x6\x11\x63\n\x11\r\x11\xE\x11\x64\x3\x11"+
		"\x3\x11\x2\x2\x2\x12\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF"+
		"\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\x2\x1D\x2\x2"+
		"\x1F\x2\x2!\x2\xF\x3\x2\t\x3\x2\x32;\x4\x2\x32;\x61\x61\x6\x2&&\x43\\"+
		"\x61\x61\x63|\x4\x2\x2\x81\xD802\xDC01\x3\x2\xD802\xDC01\x3\x2\xDC02\xE001"+
		"\x5\x2\v\f\xE\xF\"\"m\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2"+
		"\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x3#\x3\x2\x2\x2\x5(\x3\x2"+
		"\x2\x2\a-\x3\x2\x2\x2\t/\x3\x2\x2\x2\v\x31\x3\x2\x2\x2\r\x33\x3\x2\x2"+
		"\x2\xF\x35\x3\x2\x2\x2\x11\x37\x3\x2\x2\x2\x13\x39\x3\x2\x2\x2\x15;\x3"+
		"\x2\x2\x2\x17=\x3\x2\x2\x2\x19K\x3\x2\x2\x2\x1BM\x3\x2\x2\x2\x1DY\x3\x2"+
		"\x2\x2\x1F_\x3\x2\x2\x2!\x62\x3\x2\x2\x2#$\aw\x2\x2$%\ap\x2\x2%&\ak\x2"+
		"\x2&\'\av\x2\x2\'\x4\x3\x2\x2\x2()\ap\x2\x2)*\aq\x2\x2*+\av\x2\x2+,\a"+
		"g\x2\x2,\x6\x3\x2\x2\x2-.\a*\x2\x2.\b\x3\x2\x2\x2/\x30\a+\x2\x2\x30\n"+
		"\x3\x2\x2\x2\x31\x32\a}\x2\x2\x32\f\x3\x2\x2\x2\x33\x34\a\x7F\x2\x2\x34"+
		"\xE\x3\x2\x2\x2\x35\x36\a.\x2\x2\x36\x10\x3\x2\x2\x2\x37\x38\a\x30\x2"+
		"\x2\x38\x12\x3\x2\x2\x2\x39:\a=\x2\x2:\x14\x3\x2\x2\x2;<\a<\x2\x2<\x16"+
		"\x3\x2\x2\x2=\x41\x5\x1F\x10\x2>@\x5\x1D\xF\x2?>\x3\x2\x2\x2@\x43\x3\x2"+
		"\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x18\x3\x2\x2\x2\x43\x41"+
		"\x3\x2\x2\x2\x44\x45\x5\x1B\xE\x2\x45G\a\x30\x2\x2\x46H\x5\x1B\xE\x2G"+
		"\x46\x3\x2\x2\x2GH\x3\x2\x2\x2HL\x3\x2\x2\x2IJ\a\x30\x2\x2JL\x5\x1B\xE"+
		"\x2K\x44\x3\x2\x2\x2KI\x3\x2\x2\x2L\x1A\x3\x2\x2\x2MU\t\x2\x2\x2NP\t\x3"+
		"\x2\x2ON\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2RT\x3\x2"+
		"\x2\x2SQ\x3\x2\x2\x2TV\t\x2\x2\x2UQ\x3\x2\x2\x2UV\x3\x2\x2\x2V\x1C\x3"+
		"\x2\x2\x2WZ\x5\x1F\x10\x2XZ\t\x2\x2\x2YW\x3\x2\x2\x2YX\x3\x2\x2\x2Z\x1E"+
		"\x3\x2\x2\x2[`\t\x4\x2\x2\\`\n\x5\x2\x2]^\t\x6\x2\x2^`\t\a\x2\x2_[\x3"+
		"\x2\x2\x2_\\\x3\x2\x2\x2_]\x3\x2\x2\x2` \x3\x2\x2\x2\x61\x63\t\b\x2\x2"+
		"\x62\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x65\x3"+
		"\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66g\b\x11\x2\x2g\"\x3\x2\x2\x2\v\x2\x41"+
		"GKQUY_\x64\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
