//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Skinz\Desktop\Harmony\Harmony.Antlr\HarmonyParser.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class HarmonyParser : Parser {
	public const int
		UNIT=1, ATR_NAME=2, ATR_TEMPO=3, ATR_AUTHOR=4, NOTE=5, CHORD=6, STEP=7, 
		TRANSPOSE=8, PROPAGATE=9, STRUM=10, TIMES=11, BASS=12, ADD=13, LPAREN=14, 
		RPAREN=15, LBRACE=16, RBRACE=17, COMMA=18, DOT=19, SEMI=20, COLON=21, 
		SHARP=22, LBRACKET=23, RBRACKET=24, WS=25, COMMENT=26, LINE_COMMENT=27, 
		IDENTIFIER=28, DECIMAL_LITERAL=29, FLOAT_LITERAL=30;
	public const int
		RULE_compilationUnit = 0, RULE_attributes = 1, RULE_unitDeclaration = 2, 
		RULE_block = 3, RULE_blockStatement = 4, RULE_statement = 5, RULE_unitStatement = 6, 
		RULE_noteStatement = 7, RULE_chordStatement = 8, RULE_stepStatement = 9, 
		RULE_blockFunction = 10, RULE_function = 11, RULE_propagateFunction = 12, 
		RULE_transposeFunction = 13, RULE_strumFunction = 14, RULE_timesFunction = 15, 
		RULE_bassFunction = 16, RULE_addFunction = 17, RULE_noteLiteral = 18, 
		RULE_chordLiteral = 19, RULE_number = 20;
	public static readonly string[] ruleNames = {
		"compilationUnit", "attributes", "unitDeclaration", "block", "blockStatement", 
		"statement", "unitStatement", "noteStatement", "chordStatement", "stepStatement", 
		"blockFunction", "function", "propagateFunction", "transposeFunction", 
		"strumFunction", "timesFunction", "bassFunction", "addFunction", "noteLiteral", 
		"chordLiteral", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'unit'", "'name'", "'tempo'", "'author'", "'note'", "'chord'", 
		"'step'", "'transpose'", "'propagate'", "'strum'", "'times'", "'bass'", 
		"'add'", "'('", "')'", "'{'", "'}'", "','", "'.'", "';'", "':'", "'#'", 
		"'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "UNIT", "ATR_NAME", "ATR_TEMPO", "ATR_AUTHOR", "NOTE", "CHORD", 
		"STEP", "TRANSPOSE", "PROPAGATE", "STRUM", "TIMES", "BASS", "ADD", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "COMMA", "DOT", "SEMI", "COLON", "SHARP", 
		"LBRACKET", "RBRACKET", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", 
		"DECIMAL_LITERAL", "FLOAT_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HarmonyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public HarmonyParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(HarmonyParser.Eof, 0); }
		public UnitDeclarationContext[] unitDeclaration() {
			return GetRuleContexts<UnitDeclarationContext>();
		}
		public UnitDeclarationContext unitDeclaration(int i) {
			return GetRuleContext<UnitDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; attributes();
			State = 46;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UNIT) {
				{
				{
				State = 43; unitDeclaration();
				}
				}
				State = 48;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 49; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IToken name;
		public IToken author;
		public IToken tempo;
		public ITerminalNode[] IDENTIFIER() { return GetTokens(HarmonyParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HarmonyParser.IDENTIFIER, i);
		}
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(HarmonyParser.DECIMAL_LITERAL, 0); }
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 51; Match(ATR_NAME);
			State = 52; Match(COLON);
			State = 53; _localctx.name = Match(IDENTIFIER);
			}
			{
			State = 55; Match(ATR_AUTHOR);
			State = 56; Match(COLON);
			State = 57; _localctx.author = Match(IDENTIFIER);
			}
			{
			State = 59; Match(ATR_TEMPO);
			State = 60; Match(COLON);
			State = 61; _localctx.tempo = Match(DECIMAL_LITERAL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitDeclarationContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode UNIT() { return GetToken(HarmonyParser.UNIT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HarmonyParser.IDENTIFIER, 0); }
		public UnitDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterUnitDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitUnitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public UnitDeclarationContext unitDeclaration() {
		UnitDeclarationContext _localctx = new UnitDeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_unitDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(UNIT);
			State = 64; _localctx.name = Match(IDENTIFIER);
			State = 65; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(LBRACE);
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOTE) | (1L << CHORD) | (1L << STEP) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 68; blockStatement();
				}
				}
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 74; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(HarmonyParser.DOT, 0); }
		public BlockFunctionContext blockFunction() {
			return GetRuleContext<BlockFunctionContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_blockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; statement();
			State = 79;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 77; Match(DOT);
				State = 78; blockFunction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StepStatementContext stepStatement() {
			return GetRuleContext<StepStatementContext>(0);
		}
		public NoteStatementContext noteStatement() {
			return GetRuleContext<NoteStatementContext>(0);
		}
		public ChordStatementContext chordStatement() {
			return GetRuleContext<ChordStatementContext>(0);
		}
		public UnitStatementContext unitStatement() {
			return GetRuleContext<UnitStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			State = 85;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case STEP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; stepStatement();
				}
				break;
			case NOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; noteStatement();
				}
				break;
			case CHORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83; chordStatement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 84; unitStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitStatementContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode IDENTIFIER() { return GetToken(HarmonyParser.IDENTIFIER, 0); }
		public UnitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unitStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterUnitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitUnitStatement(this);
		}
	}

	[RuleVersion(0)]
	public UnitStatementContext unitStatement() {
		UnitStatementContext _localctx = new UnitStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_unitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; _localctx.name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteStatementContext : ParserRuleContext {
		public NumberContext duration;
		public NumberContext velocity;
		public ITerminalNode NOTE() { return GetToken(HarmonyParser.NOTE, 0); }
		public NoteLiteralContext noteLiteral() {
			return GetRuleContext<NoteLiteralContext>(0);
		}
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public NoteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterNoteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitNoteStatement(this);
		}
	}

	[RuleVersion(0)]
	public NoteStatementContext noteStatement() {
		NoteStatementContext _localctx = new NoteStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_noteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 89; Match(NOTE);
			State = 90; noteLiteral();
			State = 91; Match(LPAREN);
			State = 92; _localctx.duration = number();
			State = 93; Match(COMMA);
			State = 94; _localctx.velocity = number();
			State = 95; Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChordStatementContext : ParserRuleContext {
		public NumberContext duration;
		public NumberContext velocity;
		public IToken octave;
		public ITerminalNode CHORD() { return GetToken(HarmonyParser.CHORD, 0); }
		public ChordLiteralContext chordLiteral() {
			return GetRuleContext<ChordLiteralContext>(0);
		}
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(HarmonyParser.DECIMAL_LITERAL, 0); }
		public ChordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chordStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterChordStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitChordStatement(this);
		}
	}

	[RuleVersion(0)]
	public ChordStatementContext chordStatement() {
		ChordStatementContext _localctx = new ChordStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_chordStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 97; Match(CHORD);
			State = 98; chordLiteral();
			State = 99; Match(LPAREN);
			State = 100; _localctx.duration = number();
			State = 101; Match(COMMA);
			State = 102; _localctx.velocity = number();
			State = 103; Match(COMMA);
			State = 104; _localctx.octave = Match(DECIMAL_LITERAL);
			State = 105; Match(RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StepStatementContext : ParserRuleContext {
		public BlockStatementContext target;
		public NumberContext duration;
		public ITerminalNode STEP() { return GetToken(HarmonyParser.STEP, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StepStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stepStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterStepStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitStepStatement(this);
		}
	}

	[RuleVersion(0)]
	public StepStatementContext stepStatement() {
		StepStatementContext _localctx = new StepStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_stepStatement);
		try {
			State = 111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 107; Match(STEP);
				State = 108; _localctx.target = blockStatement();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 109; Match(STEP);
				State = 110; _localctx.duration = number();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockFunctionContext : ParserRuleContext {
		public FunctionContext current;
		public FunctionContext next;
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(HarmonyParser.DOT, 0); }
		public BlockFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterBlockFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitBlockFunction(this);
		}
	}

	[RuleVersion(0)]
	public BlockFunctionContext blockFunction() {
		BlockFunctionContext _localctx = new BlockFunctionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_blockFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; _localctx.current = function();
			State = 116;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				State = 114; Match(DOT);
				State = 115; _localctx.next = function();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public TransposeFunctionContext transposeFunction() {
			return GetRuleContext<TransposeFunctionContext>(0);
		}
		public PropagateFunctionContext propagateFunction() {
			return GetRuleContext<PropagateFunctionContext>(0);
		}
		public StrumFunctionContext strumFunction() {
			return GetRuleContext<StrumFunctionContext>(0);
		}
		public TimesFunctionContext timesFunction() {
			return GetRuleContext<TimesFunctionContext>(0);
		}
		public BassFunctionContext bassFunction() {
			return GetRuleContext<BassFunctionContext>(0);
		}
		public AddFunctionContext addFunction() {
			return GetRuleContext<AddFunctionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_function);
		try {
			State = 124;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TRANSPOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; transposeFunction();
				}
				break;
			case PROPAGATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; propagateFunction();
				}
				break;
			case STRUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120; strumFunction();
				}
				break;
			case TIMES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 121; timesFunction();
				}
				break;
			case BASS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 122; bassFunction();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 6);
				{
				State = 123; addFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropagateFunctionContext : ParserRuleContext {
		public IToken amount;
		public ITerminalNode PROPAGATE() { return GetToken(HarmonyParser.PROPAGATE, 0); }
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(HarmonyParser.DECIMAL_LITERAL, 0); }
		public PropagateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propagateFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterPropagateFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitPropagateFunction(this);
		}
	}

	[RuleVersion(0)]
	public PropagateFunctionContext propagateFunction() {
		PropagateFunctionContext _localctx = new PropagateFunctionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_propagateFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(PROPAGATE);
			State = 127; Match(LPAREN);
			State = 128; _localctx.amount = Match(DECIMAL_LITERAL);
			State = 129; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransposeFunctionContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode TRANSPOSE() { return GetToken(HarmonyParser.TRANSPOSE, 0); }
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(HarmonyParser.DECIMAL_LITERAL, 0); }
		public TransposeFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transposeFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterTransposeFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitTransposeFunction(this);
		}
	}

	[RuleVersion(0)]
	public TransposeFunctionContext transposeFunction() {
		TransposeFunctionContext _localctx = new TransposeFunctionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_transposeFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(TRANSPOSE);
			State = 132; Match(LPAREN);
			State = 133; _localctx.value = Match(DECIMAL_LITERAL);
			State = 134; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrumFunctionContext : ParserRuleContext {
		public ITerminalNode STRUM() { return GetToken(HarmonyParser.STRUM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(HarmonyParser.IDENTIFIER, 0); }
		public StrumFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strumFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterStrumFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitStrumFunction(this);
		}
	}

	[RuleVersion(0)]
	public StrumFunctionContext strumFunction() {
		StrumFunctionContext _localctx = new StrumFunctionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_strumFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(STRUM);
			State = 137; Match(LPAREN);
			State = 138; Match(IDENTIFIER);
			State = 139; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimesFunctionContext : ParserRuleContext {
		public IToken amount;
		public ITerminalNode TIMES() { return GetToken(HarmonyParser.TIMES, 0); }
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(HarmonyParser.DECIMAL_LITERAL, 0); }
		public TimesFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timesFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterTimesFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitTimesFunction(this);
		}
	}

	[RuleVersion(0)]
	public TimesFunctionContext timesFunction() {
		TimesFunctionContext _localctx = new TimesFunctionContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_timesFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(TIMES);
			State = 142; Match(LPAREN);
			State = 143; _localctx.amount = Match(DECIMAL_LITERAL);
			State = 144; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BassFunctionContext : ParserRuleContext {
		public ITerminalNode BASS() { return GetToken(HarmonyParser.BASS, 0); }
		public BassFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bassFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterBassFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitBassFunction(this);
		}
	}

	[RuleVersion(0)]
	public BassFunctionContext bassFunction() {
		BassFunctionContext _localctx = new BassFunctionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_bassFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(BASS);
			State = 147; Match(LPAREN);
			State = 148; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddFunctionContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(HarmonyParser.ADD, 0); }
		public NoteLiteralContext noteLiteral() {
			return GetRuleContext<NoteLiteralContext>(0);
		}
		public AddFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterAddFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitAddFunction(this);
		}
	}

	[RuleVersion(0)]
	public AddFunctionContext addFunction() {
		AddFunctionContext _localctx = new AddFunctionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_addFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(ADD);
			State = 151; Match(LPAREN);
			State = 152; noteLiteral();
			State = 153; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteLiteralContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(HarmonyParser.IDENTIFIER, 0); }
		public NoteLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noteLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterNoteLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitNoteLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NoteLiteralContext noteLiteral() {
		NoteLiteralContext _localctx = new NoteLiteralContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_noteLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChordLiteralContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(HarmonyParser.IDENTIFIER, 0); }
		public ChordLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chordLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterChordLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitChordLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ChordLiteralContext chordLiteral() {
		ChordLiteralContext _localctx = new ChordLiteralContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_chordLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(HarmonyParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode FLOAT_LITERAL() { return GetToken(HarmonyParser.FLOAT_LITERAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHarmonyParserListener typedListener = listener as IHarmonyParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_la = _input.La(1);
			if ( !(_la==DECIMAL_LITERAL || _la==FLOAT_LITERAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \xA4\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x3\x2\a\x2/\n\x2\f\x2\xE\x2\x32\v\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\a\x5H\n\x5\f\x5\xE\x5K\v\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\x6\x5\x6R\n\x6\x3\a\x3\a\x3\a\x3\a\x5\aX\n\a\x3"+
		"\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x5\vr\n\v\x3\f\x3\f\x3"+
		"\f\x5\fw\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x7F\n\r\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x16\x2\x2\x2\x17\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2(\x2*\x2\x2\x3\x3\x2\x1F \x9B\x2,\x3\x2\x2\x2\x4\x35\x3\x2\x2\x2\x6"+
		"\x41\x3\x2\x2\x2\b\x45\x3\x2\x2\x2\nN\x3\x2\x2\x2\fW\x3\x2\x2\x2\xEY\x3"+
		"\x2\x2\x2\x10[\x3\x2\x2\x2\x12\x63\x3\x2\x2\x2\x14q\x3\x2\x2\x2\x16s\x3"+
		"\x2\x2\x2\x18~\x3\x2\x2\x2\x1A\x80\x3\x2\x2\x2\x1C\x85\x3\x2\x2\x2\x1E"+
		"\x8A\x3\x2\x2\x2 \x8F\x3\x2\x2\x2\"\x94\x3\x2\x2\x2$\x98\x3\x2\x2\x2&"+
		"\x9D\x3\x2\x2\x2(\x9F\x3\x2\x2\x2*\xA1\x3\x2\x2\x2,\x30\x5\x4\x3\x2-/"+
		"\x5\x6\x4\x2.-\x3\x2\x2\x2/\x32\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x30\x31\x3"+
		"\x2\x2\x2\x31\x33\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x33\x34\a\x2\x2\x3\x34"+
		"\x3\x3\x2\x2\x2\x35\x36\a\x4\x2\x2\x36\x37\a\x17\x2\x2\x37\x38\a\x1E\x2"+
		"\x2\x38\x39\x3\x2\x2\x2\x39:\a\x6\x2\x2:;\a\x17\x2\x2;<\a\x1E\x2\x2<="+
		"\x3\x2\x2\x2=>\a\x5\x2\x2>?\a\x17\x2\x2?@\a\x1F\x2\x2@\x5\x3\x2\x2\x2"+
		"\x41\x42\a\x3\x2\x2\x42\x43\a\x1E\x2\x2\x43\x44\x5\b\x5\x2\x44\a\x3\x2"+
		"\x2\x2\x45I\a\x12\x2\x2\x46H\x5\n\x6\x2G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2"+
		"IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JL\x3\x2\x2\x2KI\x3\x2\x2\x2LM\a\x13\x2\x2"+
		"M\t\x3\x2\x2\x2NQ\x5\f\a\x2OP\a\x15\x2\x2PR\x5\x16\f\x2QO\x3\x2\x2\x2"+
		"QR\x3\x2\x2\x2R\v\x3\x2\x2\x2SX\x5\x14\v\x2TX\x5\x10\t\x2UX\x5\x12\n\x2"+
		"VX\x5\xE\b\x2WS\x3\x2\x2\x2WT\x3\x2\x2\x2WU\x3\x2\x2\x2WV\x3\x2\x2\x2"+
		"X\r\x3\x2\x2\x2YZ\a\x1E\x2\x2Z\xF\x3\x2\x2\x2[\\\a\a\x2\x2\\]\x5&\x14"+
		"\x2]^\a\x10\x2\x2^_\x5*\x16\x2_`\a\x14\x2\x2`\x61\x5*\x16\x2\x61\x62\a"+
		"\x11\x2\x2\x62\x11\x3\x2\x2\x2\x63\x64\a\b\x2\x2\x64\x65\x5(\x15\x2\x65"+
		"\x66\a\x10\x2\x2\x66g\x5*\x16\x2gh\a\x14\x2\x2hi\x5*\x16\x2ij\a\x14\x2"+
		"\x2jk\a\x1F\x2\x2kl\a\x11\x2\x2l\x13\x3\x2\x2\x2mn\a\t\x2\x2nr\x5\n\x6"+
		"\x2op\a\t\x2\x2pr\x5*\x16\x2qm\x3\x2\x2\x2qo\x3\x2\x2\x2r\x15\x3\x2\x2"+
		"\x2sv\x5\x18\r\x2tu\a\x15\x2\x2uw\x5\x18\r\x2vt\x3\x2\x2\x2vw\x3\x2\x2"+
		"\x2w\x17\x3\x2\x2\x2x\x7F\x5\x1C\xF\x2y\x7F\x5\x1A\xE\x2z\x7F\x5\x1E\x10"+
		"\x2{\x7F\x5 \x11\x2|\x7F\x5\"\x12\x2}\x7F\x5$\x13\x2~x\x3\x2\x2\x2~y\x3"+
		"\x2\x2\x2~z\x3\x2\x2\x2~{\x3\x2\x2\x2~|\x3\x2\x2\x2~}\x3\x2\x2\x2\x7F"+
		"\x19\x3\x2\x2\x2\x80\x81\a\v\x2\x2\x81\x82\a\x10\x2\x2\x82\x83\a\x1F\x2"+
		"\x2\x83\x84\a\x11\x2\x2\x84\x1B\x3\x2\x2\x2\x85\x86\a\n\x2\x2\x86\x87"+
		"\a\x10\x2\x2\x87\x88\a\x1F\x2\x2\x88\x89\a\x11\x2\x2\x89\x1D\x3\x2\x2"+
		"\x2\x8A\x8B\a\f\x2\x2\x8B\x8C\a\x10\x2\x2\x8C\x8D\a\x1E\x2\x2\x8D\x8E"+
		"\a\x11\x2\x2\x8E\x1F\x3\x2\x2\x2\x8F\x90\a\r\x2\x2\x90\x91\a\x10\x2\x2"+
		"\x91\x92\a\x1F\x2\x2\x92\x93\a\x11\x2\x2\x93!\x3\x2\x2\x2\x94\x95\a\xE"+
		"\x2\x2\x95\x96\a\x10\x2\x2\x96\x97\a\x11\x2\x2\x97#\x3\x2\x2\x2\x98\x99"+
		"\a\xF\x2\x2\x99\x9A\a\x10\x2\x2\x9A\x9B\x5&\x14\x2\x9B\x9C\a\x11\x2\x2"+
		"\x9C%\x3\x2\x2\x2\x9D\x9E\a\x1E\x2\x2\x9E\'\x3\x2\x2\x2\x9F\xA0\a\x1E"+
		"\x2\x2\xA0)\x3\x2\x2\x2\xA1\xA2\t\x2\x2\x2\xA2+\x3\x2\x2\x2\t\x30IQWq"+
		"v~";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
